// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package bloguser

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// FindByEmailRequest 通过Email获取用户信息
type FindByEmailRequest struct {
	Email                string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindByEmailRequest) Reset()         { *m = FindByEmailRequest{} }
func (m *FindByEmailRequest) String() string { return proto.CompactTextString(m) }
func (*FindByEmailRequest) ProtoMessage()    {}
func (*FindByEmailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{0}
}

func (m *FindByEmailRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindByEmailRequest.Unmarshal(m, b)
}
func (m *FindByEmailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindByEmailRequest.Marshal(b, m, deterministic)
}
func (m *FindByEmailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindByEmailRequest.Merge(m, src)
}
func (m *FindByEmailRequest) XXX_Size() int {
	return xxx_messageInfo_FindByEmailRequest.Size(m)
}
func (m *FindByEmailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindByEmailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindByEmailRequest proto.InternalMessageInfo

func (m *FindByEmailRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// FindByIDRequest 方法请求结构体
type FindByIDRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindByIDRequest) Reset()         { *m = FindByIDRequest{} }
func (m *FindByIDRequest) String() string { return proto.CompactTextString(m) }
func (*FindByIDRequest) ProtoMessage()    {}
func (*FindByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{1}
}

func (m *FindByIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindByIDRequest.Unmarshal(m, b)
}
func (m *FindByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindByIDRequest.Marshal(b, m, deterministic)
}
func (m *FindByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindByIDRequest.Merge(m, src)
}
func (m *FindByIDRequest) XXX_Size() int {
	return xxx_messageInfo_FindByIDRequest.Size(m)
}
func (m *FindByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindByIDRequest proto.InternalMessageInfo

func (m *FindByIDRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// UserResponse 方法返回结构体
type UserResponse struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Email                string   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserResponse) Reset()         { *m = UserResponse{} }
func (m *UserResponse) String() string { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()    {}
func (*UserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{2}
}

func (m *UserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserResponse.Unmarshal(m, b)
}
func (m *UserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserResponse.Marshal(b, m, deterministic)
}
func (m *UserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserResponse.Merge(m, src)
}
func (m *UserResponse) XXX_Size() int {
	return xxx_messageInfo_UserResponse.Size(m)
}
func (m *UserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserResponse proto.InternalMessageInfo

func (m *UserResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserResponse) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func init() {
	proto.RegisterType((*FindByEmailRequest)(nil), "bloguser.FindByEmailRequest")
	proto.RegisterType((*FindByIDRequest)(nil), "bloguser.FindByIDRequest")
	proto.RegisterType((*UserResponse)(nil), "bloguser.UserResponse")
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_116e343673f7ffaf) }

var fileDescriptor_116e343673f7ffaf = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2d, 0x4e, 0x2d,
	0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x48, 0xca, 0xc9, 0x4f, 0x07, 0xf1, 0x95, 0xb4,
	0xb8, 0x84, 0xdc, 0x32, 0xf3, 0x52, 0x9c, 0x2a, 0x5d, 0x73, 0x13, 0x33, 0x73, 0x82, 0x52, 0x0b,
	0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58, 0x53, 0x41, 0x7c, 0x09, 0x46, 0x05, 0x46, 0x0d,
	0xce, 0x20, 0x08, 0x47, 0x49, 0x91, 0x8b, 0x1f, 0xa2, 0xd6, 0xd3, 0x05, 0xa6, 0x90, 0x8f, 0x8b,
	0x29, 0x33, 0x05, 0xac, 0x8a, 0x35, 0x88, 0x29, 0x33, 0x45, 0x29, 0x80, 0x8b, 0x27, 0xb4, 0x38,
	0xb5, 0x28, 0x28, 0xb5, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x15, 0x5d, 0x5e, 0x48, 0x8a, 0x8b, 0x03,
	0x64, 0x6d, 0x5e, 0x62, 0x6e, 0xaa, 0x04, 0x13, 0xd8, 0x6c, 0x38, 0x1f, 0x61, 0x29, 0x33, 0x92,
	0xa5, 0x46, 0x7d, 0x8c, 0x5c, 0x2c, 0x20, 0x23, 0x85, 0x5c, 0xb9, 0xb8, 0x91, 0x5c, 0x2a, 0x24,
	0xa3, 0x07, 0xf3, 0x83, 0x1e, 0xa6, 0x07, 0xa4, 0xc4, 0x10, 0xb2, 0xc8, 0xee, 0x51, 0x62, 0x10,
	0xb2, 0xe7, 0xe2, 0x80, 0x7a, 0x22, 0x45, 0x48, 0x12, 0xdd, 0x0c, 0xb8, 0xc7, 0x70, 0x1b, 0x90,
	0xc4, 0x06, 0x0e, 0x42, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x69, 0x84, 0x24, 0xaa, 0x50,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	FindByEmail(ctx context.Context, in *FindByEmailRequest, opts ...grpc.CallOption) (*UserResponse, error)
	FindById(ctx context.Context, in *FindByIDRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) FindByEmail(ctx context.Context, in *FindByEmailRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/bloguser.User/FindByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindById(ctx context.Context, in *FindByIDRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/bloguser.User/FindById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	FindByEmail(context.Context, *FindByEmailRequest) (*UserResponse, error)
	FindById(context.Context, *FindByIDRequest) (*UserResponse, error)
}

// UnimplementedUserServer can be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (*UnimplementedUserServer) FindByEmail(ctx context.Context, req *FindByEmailRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByEmail not implemented")
}
func (*UnimplementedUserServer) FindById(ctx context.Context, req *FindByIDRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_FindByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloguser.User/FindByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindByEmail(ctx, req.(*FindByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bloguser.User/FindById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindById(ctx, req.(*FindByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bloguser.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindByEmail",
			Handler:    _User_FindByEmail_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _User_FindById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
